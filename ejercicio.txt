Buen día:
Atención para la semana que viene Refactorizar el ejemplo de React que pasé d ela clase persona co las 3 capas de genécos en los servicios

1- Clase Abstracta con los métodos clásicos
2 - Una clase que herede  de la antgerior con la implementación de los métodos
3- La clase objetivo que herede del la del paso 2. ejemplo Persona, Sucursal,etc.

Yo hice en modelo la clase genérica a MEDIAS
Utilicen async await

TypeScript
interface DataModel<T> {
    id?: number; // Ejemplo de propiedad con tipo genérico
    [key: string]: T; // Permite propiedades dinámicas con tipos genéricos
}

abstract class AbstractBackendClient<T extends DataModel<T>> {
    protected baseUrl: string;

    constructor(baseUrl: string) {
        this.baseUrl = baseUrl;
    }

    abstract getAll(): Promise<T[]>;

    abstract getById(id: number): Promise<T | null>;

    abstract post(data: T): Promise<T>;

    abstract put(id: number, data: T): Promise<T>;
}


--------------------------------------------------------------------------------------------------------

class BackendClient<T extends DataModel<T>> extends AbstractBackendClient<T> {
    constructor(baseUrl: string) {
        super(baseUrl);
    }

    async getAll(): Promise<T[]> {
        const response = await fetch(`${this.baseUrl}/`);
        const data = await response.json();
        return data as T[];
    }

    async getById(id: number): Promise<T | null> {
        const response = await fetch(`${this.baseUrl}/${id}`);
        if (!response.ok) {
            return null;
        }
        const data = await response.json();
        return data as T;
    }

    async post(data: T): Promise<T> {
        const response = await fetch(`${this.baseUrl}/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        });
        const newData = await response.json();
        return newData as T;
    }

    async put(id: number, data: T): Promise<T> {
        const response = await fetch(`${this.baseUrl}/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        });
        const updatedData = await response.json();
        return updatedData as T;
    }
}
------------------------------------------------------------------------------------------
Ejmeplo de uso

/ Example with 'Producto' model
interface Producto extends DataModel<Producto> {
    nombre: string;
    precio: number;
    stock: number;
}

const backendClient = new BackendClient<Producto>('https://mi-backend.com/productos');

// Usage of methods remains the same as before
backendClient.getAll()
    .then(productos => console.log('Productos:', productos))
    .catch(error => console.error('Error al obtener productos:', error));

// ... (rest of the usage example remains the same)